SoarFile                        = OptWhitespace ( Code OptWhitespace )*;

Code                            = SoarProduction
                                | Tcl;

Tcl                             = TclSource
                                | TclPushd
                                | TclPopd
                                | TclOther;
TclPushd                        = "pushd" Whitespace ( '"' )? File ( '"' )?;
TclSource                       = "source" Whitespace ( '"' )? File ( '"' )?;
TclPopd                         = "popd";
TclOther                        = TclCommand ( Whitespace ( print )* )?;
TclCommand                      = "clog"
                                | "echo"
                                | "epmem"
                                | "excise"
                                | "indifferent-selection"
                                | "indif"
                                | "inds"
                                | "learn"
                                | "max-elaborations"
                                | "multi-attributes"
                                | "rete-net"
                                | "rl"
                                | "run"
                                | "save-backtraces"
                                | "smem"
                                | "timers"
                                | "wait"
                                | "warnings"
                                | "watch"
                                | "wma"
                                | "w";
File                            = ( DirPath )* Filename;
DirPath                         = ( DirChar )+ "/";
DirChar                         = alnum
                                | "-"
                                | "."
                                | "_";
Filename                        = ( FileChar )+;
FileChar                        = alnum
                                | "."
                                | "-"
                                | "_";

SoarProduction                  = "sp" OptWhitespace "{" OptWhitespace ProductionName Whitespace ( Documentation Whitespace )? ( ProductionType Whitespace )* ConditionSide OptWhitespace "-->" OptWhitespace ActionSide OptWhitespace "}";
ProductionName                  = SymbolicConstant;
Documentation                   = '"' ( NoDoubleQuote )* '"';
ProductionType                  = ":o-support"
                                | ":i-support"
                                | ":chunk"
                                | ":default"
                                | ":monitor"
                                | ":interrupt"
                                | ":template";

ConditionSide                   = FirstCondition ( OptWhitespace Condition )*;
FirstCondition                  = "(" OptWhitespace StateSpecifier Whitespace VariableTest OptWhitespace ")";
StateSpecifier                  = "state";
Condition                       = ( NegationSpecifier )? OptWhitespace PositiveCondition;
NegationSpecifier               = "-";
PositiveCondition               = ConditionForOneIdentifier
                                | ConditionForMultipleIdentifiers;
ConditionForMultipleIdentifiers = "{" ( OptWhitespace Condition )+ OptWhitespace "}";
ConditionForOneIdentifier       = "(" ( StateSpecifier Whitespace )? OptWhitespace VariableTest OptWhitespace ")";

VariableTest                    = Variable ( Whitespace AttributeValueTest )*;
AttributeValueTest              = ( NegationSpecifier OptWhitespace )? "^" OptWhitespace AttributeTest ( OptWhitespace "." OptWhitespace AttributeTest )* ( Whitespace ValueTest )*;
AttributeTest                   = Test;
ValueTest                       = PreferenceTest
                                | StructuredValueTest;
PreferenceTest                  = Test ( Whitespace AcceptableSpecifier )?;
AcceptableSpecifier             = "+";
StructuredValueTest             = "(" OptWhitespace ( Variable Whitespace )? AttributeValueTest ( Whitespace AttributeValueTest )* OptWhitespace ")";
Test                            = ConjunctiveTest
                                | SimpleTest;
ConjunctiveTest                 = "{" OptWhitespace ( Variable Whitespace )? SimpleTest ( Whitespace SimpleTest )* OptWhitespace "}";
SimpleTest                      = DisjunctiveTest
                                | RelationalTest;
DisjunctiveTest                 = "<<" ( Whitespace Constant )+ Whitespace ">>";
RelationalTest                  = ( Relation Whitespace )? SingleTest;
Relation                        = "="
                                | "<>"
                                | "<=>"
                                | ">="
                                | "<="
                                | "<"
                                | ">";
SingleTest                      = Constant
                                | Variable;
Constant                        = SymbolicConstant
                                | FloatingPointConstant
                                | IntegerConstant;

ActionSide                      = ( OptWhitespace Action )*;
Action                          = VariableAttributeValueMake
                                | FunctionCall;
VariableAttributeValueMake      = "(" OptWhitespace Variable ( Whitespace AttributeValueMake )+ OptWhitespace ")";
RHSValue                        = Constant
                                | FunctionCall
                                | Variable;
AttributeValueMake              = "^" RHSValue ( "." RHSValue )* Whitespace ValueOrPreferenceList;
ValueOrPreferenceList           = RHSValue ( Whitespace ValueOrPreference )*;
ValueOrPreference               = RHSValue
                                | PreferenceSpecifier;
PreferenceSpecifier             = NaturallyUnaryPreferenceItem
                                | BinaryPreferenceItem
                                | ForcedUnaryPreferenceItem;
NaturallyUnaryPreferenceItem    = NaturallyUnaryPreference ( OptWhitespace "," )?;
ForcedUnaryPreferenceItem       = ForcedUnaryPreference ( OptWhitespace "," )?;
BinaryPreferenceItem            = BinaryPreference Whitespace RHSValue ( OptWhitespace "," )?;
NaturallyUnaryPreference        = "+"
                                | "-"
                                | "!"
                                | "~";
BinaryPreference                = ">"
                                | "="
                                | "<";
ForcedUnaryPreference           = BinaryPreference;
FunctionCall                    = "(" OptWhitespace FunctionName ( Whitespace FunctionArgument )* OptWhitespace ")";
FunctionName                    = SymbolicConstant
                                | "+"
                                | "-"
                                | "*"
                                | "/";
FunctionArgument                = FunctionFlag
                                | RHSValue;
FunctionFlag                    = "-" ( "-" )? ( alpha )+;

Variable                        = "<" VariableHead ( VariableTail )* ">";
VariableHead                    = alpha;
VariableTail                    = alnum
                                | "="
                                | "_"
                                | "-"
                                | ":"
                                | "?"
                                | "/"
                                | "$"
                                | "*"
                                | "&"
                                | "%"
                                | "+";
IntegerConstant                 = ( PlusMinus )? ( digit )+;
FloatingPointConstant           = FloatingPointConstantDotBefore
                                | FloatingPointConstantDotAfter;
FloatingPointConstantDotBefore  = ( PlusMinus )? ( digit )* "." ( digit )+;
FloatingPointConstantDotAfter   = ( PlusMinus )? ( digit )+ "." ( digit )*;
PlusMinus                       = "+"
                                | "-";
SymbolicConstant                = SymbolicConstantName
                                | SymbolicString;
SymbolicConstantName            = SymbolicConstantHead ( SymbolicConstantTail )*;
SymbolicConstantHead            = alpha
                                | "*";
SymbolicConstantTail            = alnum
                                | "<"
                                | "="
                                | ">"
                                | "_"
                                | "-"
                                | ":"
                                | "?"
                                | "/"
                                | "$"
                                | "*"
                                | "&"
                                | "%"
                                | "+";
SymbolicString                  = "|" ( SymbolicStringChar )+ "|";
SymbolicStringChar              = NoPipe
                                | "\|";
OptWhitespace                   = ( Space )*;
Whitespace                      = ( Space )+;
Space                           = Comment
                                | blank
                                | newline;
Comment                         = "#" ( print )*;
NoDoubleQuote                   = print
                                - '"';
NoPipe                          = print
                                - "|";
